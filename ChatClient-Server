import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;


public class ChatServer {

    private ArrayList<ClientInstance> clients;
    private ServerSocket serverSocket;

    public ChatServer() throws IOException {
        clients = new ArrayList<ClientInstance>();
        serverSocket = new ServerSocket(7778);
        System.out.println("Server started");
    }

    private void startServer() throws IOException {
        {
            while (!serverSocket.isClosed()) {
                Socket clientSocket = serverSocket.accept();
                ClientInstance client = new ClientInstance( clients,clientSocket);
                clients.add(client);
                client.start();
            }
        }
    }

    public static void main(String[] args) {
        try {
            new ChatServer().startServer();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


}
////
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;

public class ClientInstance extends Thread {
    private ArrayList<ClientInstance> clients;
    private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ClientInstance(ArrayList<ClientInstance> clients,Socket socket) throws IOException{
        this.clients = clients;
        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        writer = new PrintWriter(socket.getOutputStream());
        this.socket = socket;
    }

    @Override
    public void run() {
        String message;
        try {

            while((message = reader.readLine())!=null) {
                notifyAllClients(message);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    private void sendMessage(String message){
        writer.println(message);
        writer.flush();
    }
    private void notifyAllClients(String message){
        for (ClientInstance c: clients){
            c.sendMessage(message);
        }
    }
}
////
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ChatClient extends Thread {
    private Socket clientSocket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ChatClient() throws IOException {
        clientSocket = new Socket("localhost ", 7778);
        reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        writer = new PrintWriter(clientSocket.getOutputStream());
    }

    private void startClient() throws IOException{
        BufferedReader reader1 = new BufferedReader(new InputStreamReader(System.in));
        this.start();
        String message;
        System.out.println("Write your message");
        while ((message = reader1.readLine()).equals("exit")){
            writer.println(message);
            writer.flush();
        }
        writer.close();
        reader.close();
        clientSocket.close();
    }
    @Override
    public void run(){
        String message;
        try {
            while ((message = reader.readLine())!= null){
                System.out.println(message);
            }
        } catch (IOException e) {
            System.out.println("Disconnected from server");
        }
    }

    public static void main(String[] args) throws IOException {
        new ChatClient().startClient();
    }


}
